(()=>{"use strict";class t{constructor(t){this.backend=t||{}}entries(){const t=[];for(const e in this.backend)t.push({key:e,value:this.backend[e]});return t}forEach(t){this.entries().forEach((e=>t(e.key,e.value)))}values(){return this.entries().map((t=>t.value))}keys(){return this.entries().map((t=>t.key))}clear(){this.backend={}}get(t){return this.backend[t]}put(t,e){this.backend[t]=e}remove(t){delete this.backend[t]}length(){return this.entries().length}}class e extends Application{constructor(t){super(),this.importer=t,this.initializeState()}static get defaultOptions(){const t=super.defaultOptions;return mergeObject(t,{popOut:!0,minimizable:!0,resizable:!0,height:"auto",id:"swn-importer-dialog",template:"modules/swn-importer/templates/dialog.html",title:"Import Sector Without Numbers sector"})}initializeState(){this.state={importEnabled:!1}}getData(){return this.state}activateListeners(t){const e=t.find("#swn-importer-file-input")[0],n=t.find("#swn-importer-import-button")[0];t.on("change","#swn-importer-file-input",(t=>{const r=e.files;(null==r?void 0:r.length)?n.removeAttribute("disabled"):n.setAttribute("disabled","disabled")})),t.on("click","#swn-importer-import-button",(t=>{var n;const r=URL.createObjectURL(null===(n=e.files)||void 0===n?void 0:n.item(0));this.importer.importFile(r,{}),this.close()})),t.on("click","#swn-importer-cancel-button",(t=>{this.close()}))}}const n="swn-importer",r=2*7500**.5,s=r/2;class o{constructor(){this.dialog=new e(this)}initUI(t){t.find(".header-actions").append("<button id='swn-import-button' title='Import a sector from Sectors Without Number'><i class='fas fa-cloud-download-alt'></i> SWN Import</button>"),t.on("click","#swn-import-button",(t=>this.openImportDialog()))}openImportDialog(){this.dialog.render(!0)}importFile(e,n){var r;(null===(r=game.user)||void 0===r?void 0:r.isGM)&&fetch(e).then((t=>t.json())).then((e=>{const n={asteroidBase:new t(e.asteroidBase),asteroidBelt:new t(e.asteroidBelt),blackHole:new t(e.blackHole),deepSpaceStation:new t(e.deepSpaceStation),gasGiantMine:new t(e.gasGiantMine),moon:new t(e.moon),moonBase:new t(e.moonBase),note:null,orbitalRuin:new t(e.orbitalRuin),planet:new t(e.planet),refuelingStation:new t(e.refuelingStation),researchBase:new t(e.researchBase),sector:new t(e.sector),spaceStation:new t(e.spaceStation),system:new t(e.system)};return this.preprocessEntity(n,"asteroidBase"),this.preprocessEntity(n,"asteroidBelt"),this.preprocessEntity(n,"blackHole"),this.preprocessEntity(n,"deepSpaceStation"),this.preprocessEntity(n,"gasGiantMine"),this.preprocessEntity(n,"moon"),this.preprocessEntity(n,"moonBase"),this.preprocessEntity(n,"orbitalRuin"),this.preprocessEntity(n,"planet"),this.preprocessEntity(n,"refuelingStation"),this.preprocessEntity(n,"researchBase"),this.preprocessEntity(n,"spaceStation"),this.preprocessEntity(n,"system"),this.processSector(n)})).then((t=>{var e,n;new Dialog({title:"Import Completed",content:`The sector ${null===(e=t.sectorData)||void 0===e?void 0:e.sector.values()[0].name} has completed successfully. ${null===(n=t.entityJournals)||void 0===n?void 0:n.length} journal entries where created.`,buttons:{ok:{icon:'<i class="fas fa-check"></i>',label:"Accept"}},default:"ok"}).render(!0)}))}preprocessEntity(t,e){t[e].entries().forEach((t=>{t.value.id=t.key,t.value.type=e}))}processSector(t){const e={};return Promise.resolve(t).then((t=>(e.sectorData=t,this.createSectorJournalFolder(t)))).then((n=>(e.sectorJournalFolder=n,this.createSystemJournalFolders(t,n)))).then((n=>(e.systemJournalFolders=n,this.createJournals(t,n)))).then((n=>(e.entityJournals=n,this.createScene(t,n)))).then((t=>(e.scene=t,Promise.resolve(e))))}createScene(t,e){const n=t.sector.entries()[0],r=this.getSectorNotes(t,e),s={active:!0,backgroundColor:"#01162c",flags:{"swn-importer.id":n.key,"swn-importer.type":"sector"},grid:200,gridAlpha:.3,gridColor:"#99caff",gridDistance:1,gridType:CONST.GRID_TYPES.HEXODDQ,gridUnits:"units",height:this.getSceneHeight(n.value.rows),img:"modules/swn-importer/images/starField.png",name:`Sector ${n.value.name}`,padding:0,notes:r,width:this.getSceneWidth(n.value.columns)};return Scene.create(s)}getSectorNotes(t,e){const n=[];return this.getGroupedEntities(t).forEach(((r,s)=>{const o=this.getSystemById(t,r);o&&n.push(...this.getSystemNotes(o,e,s))})),n}getSystemNotes(t,e,n){const r=[];for(let s=0;s<n.length;s++){const o=this.createEntityNote(t,e,n[s],n.length,s);o&&r.push(o)}const s=this.createEntityNote(t,e);return s&&r.push(s),r}getSystemById(t,e){const n=[];n.push(...t.system.values()),n.push(...t.blackHole.values());const r=n.filter((t=>t.id===e));return r.length?r[0]:null}getGroupedEntities(e){const n=new t({});e.system.forEach(((t,e)=>{n.put(t,[])})),e.blackHole.forEach(((t,e)=>{n.put(t,[])})),e.asteroidBase.forEach(((t,r)=>{const s=this.getContainingSystemId(e,r);s&&n.get(s).push(r)})),e.asteroidBelt.forEach(((t,r)=>{const s=this.getContainingSystemId(e,r);s&&n.get(s).push(r)})),e.deepSpaceStation.forEach(((t,r)=>{const s=this.getContainingSystemId(e,r);s&&n.get(s).push(r)})),e.gasGiantMine.forEach(((t,r)=>{const s=this.getContainingSystemId(e,r);s&&n.get(s).push(r)})),e.moon.forEach(((t,r)=>{const s=this.getContainingSystemId(e,r);s&&n.get(s).push(r)})),e.moonBase.forEach(((t,r)=>{const s=this.getContainingSystemId(e,r);s&&n.get(s).push(r)})),e.orbitalRuin.forEach(((t,r)=>{const s=this.getContainingSystemId(e,r);s&&n.get(s).push(r)})),e.planet.forEach(((t,r)=>{const s=this.getContainingSystemId(e,r);s&&n.get(s).push(r)})),e.refuelingStation.forEach(((t,r)=>{const s=this.getContainingSystemId(e,r);s&&n.get(s).push(r)})),e.researchBase.forEach(((t,r)=>{const s=this.getContainingSystemId(e,r);s&&n.get(s).push(r)})),e.spaceStation.forEach(((t,r)=>{const s=this.getContainingSystemId(e,r);s&&n.get(s).push(r)}));const r=new t({});return n.forEach(((t,e)=>{r.put(t,this.getSortedEntityArray(e))})),r}getSortedEntityArray(t){const e=[];if(t.filter((t=>"planet"===t.type&&"system"===t.parentEntity)).forEach((n=>{e.push(n),t.filter((t=>"moon"===t.type&&t.parent===n.id)).forEach((n=>{e.push(n),t.filter((t=>"moonBase"===t.type&&t.parent===n.id)).forEach((t=>e.push(t))),t.filter((t=>"researchBase"===t.type&&t.parent===n.id)).forEach((t=>e.push(t))),t.filter((t=>"orbitalRuin"===t.type&&t.parent===n.id)).forEach((t=>e.push(t))),t.filter((t=>"refuelingStation"===t.type&&t.parent===n.id)).forEach((t=>e.push(t)))})),t.filter((t=>"researchBase"===t.type&&t.parent===n.id)).forEach((t=>e.push(t))),t.filter((t=>"gasGiantMine"===t.type&&t.parent===n.id)).forEach((t=>e.push(t))),t.filter((t=>"refuelingStation"===t.type&&t.parent===n.id)).forEach((t=>e.push(t))),t.filter((t=>"spaceStation"===t.type&&t.parent===n.id)).forEach((t=>e.push(t))),t.filter((t=>"orbitalRuin"===t.type&&t.parent===n.id)).forEach((t=>e.push(t)))})),t.filter((t=>"asteroidBelt"===t.type&&"system"===t.parentEntity)).forEach((n=>{e.push(n),t.filter((t=>"asteroidBase"===t.type&&t.parent===n.id)).forEach((t=>e.push(t))),t.filter((t=>"refuelingStation"===t.type&&t.parent===n.id)).forEach((t=>e.push(t))),t.filter((t=>"spaceStation"===t.type&&t.parent===n.id)).forEach((t=>e.push(t)))})),t.filter((t=>"refuelingStation"===t.type&&"system"===t.parentEntity)).forEach((t=>e.push(t))),t.filter((t=>"refuelingStation"===t.type&&"blackHole"===t.parentEntity)).forEach((t=>e.push(t))),t.filter((t=>"researchBase"===t.type&&"system"===t.parentEntity)).forEach((t=>e.push(t))),t.filter((t=>"researchBase"===t.type&&"blackHole"===t.parentEntity)).forEach((t=>e.push(t))),t.filter((t=>"deepSpaceStation"===t.type&&"system"===t.parentEntity)).forEach((t=>e.push(t))),t.filter((t=>"deepSpaceStation"===t.type&&"blackHole"===t.parentEntity)).forEach((t=>e.push(t))),e.length!=t.length)throw console.log(t,e),new Error("Some entity is not linked with its parent");return e}getSceneWidth(t){return Math.floor(150*t+50)}getSceneHeight(t){return Math.floor((t+1)*r)}createEntityNote(t,e,n,r,s){const o=this.getIconPosition(t,r,s);return o?{entryId:n?this.getJournalEntry(e,n.id):null,x:o.x,y:o.y,icon:this.getEntityIcon(n?n.type:t.type),iconSize:32,text:n?n.name:t.name,fontSize:32,textAnchor:o.tooltipPosition,iconTint:this.getIconTint(n?n.type:t.type)}:null}getIconTint(t){return"#ffffff"}getRandomColor(t,e){const n=this.hexToBytes(t.substr(1,6));for(let t=0;t<3;t++){const r=Math.floor(Math.random()*e)-e/2;n[t]=n[t]+r,n[t]=Math.min(n[t],255),n[t]=Math.max(n[t],0)}return"#"+this.bytesToHex(n)}hexToBytes(t){const e=[];for(let n=0;n<t.length;n+=2)e.push(parseInt(t.substr(n,2),16));return e}bytesToHex(t){const e=[];for(let n=0;n<t.length;n++){const r=t[n]<0?t[n]+256:t[n];e.push((r>>>4).toString(16)),e.push((15&r).toString(16))}return e.join("")}getJournalEntry(t,e){const r=t.filter((t=>t.getFlag(n,"id")===e));return r.length?r[0].id:null}getEntityIcon(t){switch(t){case"system":return"modules/swn-importer/images/sun.png";case"blackHole":return"modules/swn-importer/images/blackHole.png";case"asteroidBase":return"modules/swn-importer/images/asteroidBase.png";case"asteroidBelt":return"modules/swn-importer/images/asteroidBelt.png";case"moon":return"modules/swn-importer/images/moon.png";case"planet":return"modules/swn-importer/images/planet.png";case"gasGiantMine":return"modules/swn-importer/images/gasGiant.png";case"researchBase":return"modules/swn-importer/images/researchBase.png";case"refuelingStation":return"modules/swn-importer/images/refuelingStation.png";case"spaceStation":return"modules/swn-importer/images/spaceStation.png";case"moonBase":return"modules/swn-importer/images/moonBase.png";case"deepSpaceStation":return"modules/swn-importer/images/deepSpaceStation.png";case"orbitalRuin":return"modules/swn-importer/images/orbitalRuin.png";default:return CONST.DEFAULT_NOTE_ICON}}getIconPosition(t,e,n){const o=t.x-1,i=t.y-1;let a={horizontal:0,vertical:0},l=CONST.TEXT_ANCHOR_POINTS.CENTER;if(null!=e&&null!=n){const t=n*(2*Math.PI/e);l=t<=1/4*Math.PI?CONST.TEXT_ANCHOR_POINTS.RIGHT:t<=3/4*Math.PI?CONST.TEXT_ANCHOR_POINTS.BOTTOM:t<=5/4*Math.PI?CONST.TEXT_ANCHOR_POINTS.LEFT:t<=7/4*Math.PI?CONST.TEXT_ANCHOR_POINTS.TOP:CONST.TEXT_ANCHOR_POINTS.RIGHT,a=this.getEntityOffset(t)}return o%2==0&&(a.vertical+=s),{x:Math.floor(150*o+100+a.horizontal),y:Math.floor(r*i+s+a.vertical),tooltipPosition:l}}getEntityOffset(t){return{horizontal:65*Math.cos(t),vertical:65*Math.sin(t)}}getContainingSystem(t,e){const n=this.getContainingSystemId(t,e);if(n){const e=t.system.get(n),r=t.blackHole.get(n);return e||r}return null}createJournals(t,e){const n=[];return n.push(this.createEntityJournals(t,"asteroidBase",e)),n.push(this.createEntityJournals(t,"asteroidBelt",e)),n.push(this.createEntityJournals(t,"deepSpaceStation",e)),n.push(this.createEntityJournals(t,"gasGiantMine",e)),n.push(this.createEntityJournals(t,"moon",e)),n.push(this.createEntityJournals(t,"moonBase",e)),n.push(this.createEntityJournals(t,"orbitalRuin",e)),n.push(this.createEntityJournals(t,"planet",e)),n.push(this.createEntityJournals(t,"refuelingStation",e)),n.push(this.createEntityJournals(t,"researchBase",e)),n.push(this.createEntityJournals(t,"spaceStation",e)),Promise.all(n).then((t=>{const e=[];return t.forEach((t=>{t.forEach((t=>e.push(t)))})),JournalEntry.create(e).then((t=>t?t instanceof JournalEntry?[t]:t:[]))}))}createEntityJournals(t,e,n){const r=t[e].entries().map((r=>new Promise((s=>{this.getJournalContent(r.value,e).then((o=>{const i={type:"JournalEntry",name:this.getJournalName(r.value,e),folder:this.getContainingSystemFolder(t,n,r.value),content:o,flags:{"swn-importer.id":r.key,"swn-importer.type":e}};s(i)}))}))));return Promise.all(r)}getContainingSystemFolder(t,e,r){const s=this.getContainingSystemId(t,r);if(s){const t=e.filter((t=>t.getFlag(n,"id")===s));return t.length?t[0].id:void 0}}getJournalContent(t,e){return"atmosphere"in t.attributes?this.getPlanetJournalContent(t):this.getEntityJournalContent(t,e)}getEntityJournalContent(t,e){const n=t.attributes;return renderTemplate("modules/swn-importer/templates/entity.html",{...n,name:t.name,type:this.getTypeName(e)})}getPlanetJournalContent(t){const e=t.attributes;return renderTemplate("modules/swn-importer/templates/planet.html",{...e,name:t.name})}getTypeName(t){switch(t){case"asteroidBase":return"Asteroid Base";case"asteroidBelt":return"Asteroid Belt";case"blackHole":return"Black Hole";case"deepSpaceStation":return"Deep Space Station";case"gasGiantMine":return"Gas Giant Mine";case"moon":return"Moon";case"moonBase":return"Moon Base";case"orbitalRuin":return"Orbital Ruin";case"planet":return"Planet";case"refuelingStation":return"Refueling Station";case"researchBase":return"Research Base";case"sector":return"Sector";case"spaceStation":return"Space Station";case"system":return"System";default:return null}}getJournalName(t,e){return`${this.getTypeName(e)} - ${t.name}`}createSystemJournalFolders(t,e){if(e){const n=[];return t.system.forEach(((t,r)=>{const s=`System - ${r.name}`;n.push({name:s,type:"JournalEntry",parent:e,flags:{"swn-importer.id":t,"swn-importer.type":"system"}})})),t.blackHole.forEach(((t,r)=>{const s=`Black Hole - ${r.name}`;n.push({name:s,type:"JournalEntry",parent:e,flags:{"swn-importer.id":t,"swn-importer.type":"blackHole"}})})),Folder.create(n).then((t=>t?t instanceof Folder?[t]:t:[]))}return Promise.resolve([])}createSectorJournalFolder(t){const e=t.sector.entries()[0],n=`Sector - ${e.value.name}`;return Folder.create({name:n,type:"JournalEntry",flags:{id:e.key,type:"sector"}})}getContainingSystemId(t,e){if(e.parentEntity){if("system"==e.parentEntity||"blackHole"==e.parentEntity)return e.parent;{const n=t[e.parentEntity].get(e.parent);return this.getContainingSystemId(t,n)}}return null}}let i;Hooks.once("init",(async()=>{console.log("=============================HMR============================"),CONFIG.debug.hooks=!0,i=new o})),Hooks.once("ready",(async()=>{})),Hooks.on("renderSceneDirectory",(function(t,e){i.initUI(e)}))})();